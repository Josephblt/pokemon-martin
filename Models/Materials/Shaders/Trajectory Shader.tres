[gd_resource type="VisualShader" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "view"

[sub_resource type="VisualShaderNodeVectorOp" id=2]
operator = 8

[sub_resource type="VisualShaderNodeVectorInterp" id=3]

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "normal"

[sub_resource type="VisualShaderNodeColorUniform" id=5]
uniform_name = "start_color"

[sub_resource type="VisualShaderNodeColorUniform" id=6]
uniform_name = "end_color"

[sub_resource type="VisualShaderNodeVectorInterp" id=7]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 256, 256, 256 ) ]
operator = 2

[resource]
code = "shader_type spatial;
render_mode unshaded, ensure_correct_normals, shadows_disabled, ambient_light_disabled;

uniform vec4 start_color : hint_color;
uniform vec4 end_color : hint_color;



void vertex() {
// Input:2
	vec3 n_out2p0 = VERTEX;

// VectorOp:3
	vec3 n_in3p1 = vec3(256.00000, 256.00000, 256.00000);
	vec3 n_out3p0 = n_out2p0 * n_in3p1;

// Output:0
	COLOR.rgb = n_out3p0;

}

void fragment() {
// ColorUniform:6
	vec3 n_out6p0 = start_color.rgb;
	float n_out6p1 = start_color.a;

// ColorUniform:7
	vec3 n_out7p0 = end_color.rgb;
	float n_out7p1 = end_color.a;

// Input:2
	vec3 n_out2p0 = NORMAL;

// Input:14
	vec3 n_out14p0 = VIEW;

// VectorOp:15
	vec3 n_out15p0 = cross(n_out2p0, n_out14p0);

// VectorMix:8
	vec3 n_out8p0 = mix(n_out6p0, n_out7p0, n_out15p0);

// VectorMix:16
	vec3 n_out16p0 = mix(vec3(n_out6p1), vec3(n_out7p1), n_out15p0);

// Output:0
	ALBEDO = n_out8p0;
	ALPHA = dot(n_out16p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -29.6498, 130.35 )
flags/ambient_light_disabled = true
flags/ensure_correct_normals = true
flags/shadows_disabled = true
flags/unshaded = true
nodes/vertex/0/position = Vector2( 420, 180 )
nodes/vertex/2/node = SubResource( 8 )
nodes/vertex/2/position = Vector2( 40, 180 )
nodes/vertex/3/node = SubResource( 9 )
nodes/vertex/3/position = Vector2( 220, 180 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 0, 6 )
nodes/fragment/0/position = Vector2( 1000, 200 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( 0, 440 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 0, 200 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 0, 320 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 400, 200 )
nodes/fragment/14/node = SubResource( 1 )
nodes/fragment/14/position = Vector2( 0, 520 )
nodes/fragment/15/node = SubResource( 2 )
nodes/fragment/15/position = Vector2( 200, 440 )
nodes/fragment/16/node = SubResource( 3 )
nodes/fragment/16/position = Vector2( 400, 320 )
nodes/fragment/connections = PoolIntArray( 8, 0, 0, 0, 7, 0, 8, 1, 6, 0, 8, 0, 14, 0, 15, 1, 2, 0, 15, 0, 15, 0, 8, 2, 6, 1, 16, 0, 7, 1, 16, 1, 15, 0, 16, 2, 16, 0, 0, 1 )
